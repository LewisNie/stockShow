#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('websocketPractice:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var WebSocketServer= require('ws').Server;
var wss=new WebSocketServer({port:8181});


var stocks={
  'APPL':95.0,
  'YHOO':70.0,
  'GOOG':85.0,
  'MSFT':209.0,
  'AMZN':50.0
};

function randomInterval(min, max){
  return Math.floor(Math.random()*(max-min+1)+min);
}
var stockUpdater;
function randomStockUpdater(){
  for(var symbol in stocks){
    if(stocks.hasOwnProperty(symbol)){
      var randomlizedChange = randomInterval(-150,150);
      var floatChange = randomlizedChange/100;
      stocks[symbol]+=floatChange;
      console.log(stocks[symbol]);
    }
  }
  var randomMSTime = randomInterval(500, 2500);
  stockUpdater = setTimeout(function() {
    randomStockUpdater();
  }, randomMSTime)
}
randomStockUpdater();

wss.on('connection',function(ws){
  console.log("connected");
  var clientStockUpdater;
  var sendStockUpdates = function(ws){
    if(ws.readyState==1){
      var stockobj={};
      for(var i = 0;i<clientStock.length;i++){
        var symbol = clientStock[i];
        console.log(symbol);
        stockobj[symbol]= stocks[symbol];

      };
      //console.log(stockobj)
      ws.send(JSON.stringify(stockobj));
    }
  };
  clientStockUpdater = setInterval(function() {
    sendStockUpdates(ws);
  }, 1000);
  var clientStock=[];
  ws.on('message',function(message){
    console.log(message);
    var stock_request = JSON.parse(message);
    clientStock= stock_request["stock"]
    console.log(clientStock);
    sendStockUpdates(ws);
  });
  ws.on('close', function() {
    if(typeof clientStockUpdater !== 'undefined') {
      clearInterval(clientStockUpdater);
    }
  });
})


